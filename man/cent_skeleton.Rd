% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/cent_skeleton.R
\name{cent_skeleton}
\alias{cent_skeleton}
\title{Create a skeleton of a closed polygon object}
\usage{
cent_skeleton(input, simplify = TRUE, keep = 0.1, method = "dp", ...)
}
\arguments{
\item{input}{\code{sf} or \code{sfc} polygons object}

\item{simplify}{logical, indicating if the returning skeleton should be
simplified using \code{\link[rmapshaper:ms_simplify]{rmapshaper::ms_simplify()}} approach}

\item{keep}{see below}

\item{method}{see below}

\item{...}{
  Arguments passed on to \code{\link[rmapshaper:ms_simplify]{rmapshaper::ms_simplify}}
  \describe{
    \item{\code{weighting}}{Coefficient for weighting Visvalingam simplification
(default is 0.7). Higher values produce smoother output. weighting=0 is
equivalent to unweighted Visvalingam simplification.}
    \item{\code{keep_shapes}}{Prevent small polygon features from disappearing at high
simplification (default \code{FALSE})}
    \item{\code{no_repair}}{disable intersection repair after simplification (default
\code{FALSE}).}
    \item{\code{snap}}{Snap together vertices within a small distance threshold to fix
small coordinate misalignment in adjacent polygons. Default \code{TRUE}.}
    \item{\code{explode}}{Should multipart polygons be converted to singlepart polygons?
This prevents small shapes from disappearing during simplification if
\code{keep_shapes = TRUE}. Default \code{FALSE}}
    \item{\code{drop_null_geometries}}{should Features with null geometries be dropped?
Ignored for \code{Spatial*} objects, as it is always \code{TRUE}.}
    \item{\code{snap_interval}}{Specify snapping distance in source units, must be a
numeric. Default \code{NULL}}
  }}
}
\value{
An \code{sf} or \code{sfc} class object of a \code{LINESTRING} geometry
}
\description{
Create a skeleton of a closed polygon object
}
\examples{
\dontrun{
library(sf)

polygon <- sf::st_read("inst/extdata/example.gpkg", layer = "polygon")

plot(polygon)

pol_skeleton <- cent_skeleton(polygon)

plot(pol_skeleton)
}
}
